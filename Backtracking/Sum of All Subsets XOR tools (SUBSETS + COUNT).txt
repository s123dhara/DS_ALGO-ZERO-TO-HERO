class Solution {
    List<List<Integer>> subsets = new ArrayList<>();

    public void solve(int[] nums, int i, List<Integer> currSubSet) {

        // Base case
        if (i == nums.length) {
            subsets.add(new ArrayList<>(currSubSet)); // Create a new list instance
            return;
        }

        currSubSet.add(nums[i]);

        solve(nums, i + 1, currSubSet);

        currSubSet.remove(currSubSet.size() - 1);

        solve(nums, i + 1, currSubSet); // Change i to i + 1 to move to the next element
    }

    public int subsetXORSum(int[] nums) {

        List<Integer> currSubSet = new ArrayList<>();

        solve(nums, 0, currSubSet);

        int result = 0;
        for (List<Integer> subset : subsets) {

            int xor = 0;
            for (int num : subset) {
                xor ^= num;
            }

            result += xor;
        }

        return result;

    }
}