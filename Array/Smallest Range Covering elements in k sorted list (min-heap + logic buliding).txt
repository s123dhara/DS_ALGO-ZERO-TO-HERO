class Solution {
    static class Node {
        public int data;
        public int row;
        public int col;

        Node(int data, int row, int col) {
            this.data = data;
            this.row = row;
            this.col = col;
        }

    }

    public static int[] smallestRange(List<List<Integer>> nums) {
        PriorityQueue<Node> pq = new PriorityQueue<>((a,b) -> a.data - b.data); // Min - heap depends on Data

        int max_element = Integer.MIN_VALUE;

        for(int i = 0; i < nums.size(); i++) {
            //Lists are sorted so Minimum elements are in first
            List<Integer> temp = nums.get(i);
            pq.offer(new Node(temp.get(0), i, 0));
            max_element = Math.max(max_element, temp.get(0)); // keep track the maximum element
        }

        int ans_start = pq.peek().data;
        int ans_end = max_element;

        while(!pq.isEmpty()) {

            Node min_node = pq.poll();
            int min_element = min_node.data;
            int curr_row = min_node.row;
            int curr_col = min_node.col;

            if(max_element - min_element < ans_end - ans_start) {
                // then Update the details in ans_end and ans_start
                ans_end = max_element;
                ans_start = min_element;
            }

            // 3rd Step Update the max_element
            if(curr_col + 1 < nums.get(curr_row).size()) {
                // we can update until this condition satisfy
                int next_data = nums.get(curr_row).get(curr_col + 1);
                max_element = Math.max(max_element, next_data);

                //add in PriorityQueue
                pq.offer(new Node(next_data, curr_row, curr_col + 1));

            }else {
                // if not statisfied 
                // means : We have traversed Minimum nums list
                break;
            }

        }
        return new int[]{ans_start, ans_end};
    }

}