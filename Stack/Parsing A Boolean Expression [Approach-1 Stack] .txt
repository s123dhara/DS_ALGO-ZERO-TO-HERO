
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

public class Parsing_A_boolean_Expression {

    public static boolean solve(List<Character> list, char operator) {

        int n = list.size();
        boolean currResult = list.get(0) == 'f' ? false : true;

        if (operator == '&') {
            for (int i = 1; i < n; i++) {
                currResult = currResult & (list.get(i) == 'f' ? false : true);
            }
        } else if (operator == '|') {
            for (int i = 1; i < n; i++) {
                currResult = currResult | (list.get(i) == 'f' ? false : true);
            }
        } else {
            // '!' operator
            currResult = list.get(0) == 'f'; // negate the first element
        }

        return currResult;
    }

    public static boolean parseBoolExpr(String expression) {
        Stack<Character> st = new Stack<>();
        int n = expression.length();
        Stack<Character> st2 = new Stack<>();
        List<Character> list = new ArrayList<>();

        for (int i = 0; i < n; i++) {
            char currChar = expression.charAt(i);
            if (currChar == ',') {
                continue;
            }
            if (currChar == '!' || currChar == '&' || currChar == '|') {
                st2.push(currChar);
                continue;
            }

            if (currChar == '(' || currChar == 't' || currChar == 'f') {
                st.push(currChar);
            }

            if (currChar == ')') {
                // Fix the loop condition
                while (st.peek() != '(') {
                    list.add(0, st.pop()); // pop and add to the list
                }
                st.pop(); // remove '('

                // Calculate and add result to st
                char operator = st2.pop();
                boolean result = solve(list, operator);
                st.push(result ? 't' : 'f'); // push the result back to st
                list.clear();
            }
        }

        return st.peek() == 't';
    }

    public static void main(String[] args) {
        // String expression = "&(|(f))";
        String expression = "!(&(f,t))";
        System.out.println("OUTPUT : " + parseBoolExpr(expression)); // Should print false
    }
}
